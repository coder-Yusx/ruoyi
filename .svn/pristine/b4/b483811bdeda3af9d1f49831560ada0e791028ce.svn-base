package com.ruoyi.web.controller.basp;

import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import com.ruoyi.basp.domain.*;
import com.ruoyi.basp.service.*;
import com.ruoyi.common.core.domain.Common;
import com.ruoyi.common.json.JSON;
import com.ruoyi.common.json.JSONContrast;
import com.ruoyi.common.utils.ServletUtils;
import com.ruoyi.framework.util.LogUtils;
import com.ruoyi.framework.util.ShiroUtils;
import com.ruoyi.system.domain.SysPerson;
import net.sf.json.JSONObject;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import com.ruoyi.common.annotation.Log;
import com.ruoyi.common.enums.BusinessType;
import com.ruoyi.common.core.controller.BaseController;
import com.ruoyi.common.core.page.TableDataInfo;
import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.utils.poi.ExcelUtil;

/**
 * 公共户 信息操作处理
 * 
 * @author ruoyi
 * @date 2019-05-29
 */
@Controller
@RequestMapping("/basp/ggfcHb")
public class GgfcHbController extends BaseController
{
    private String prefix = "basp/ggfcHb";
	
	@Autowired
	private IGgfcHbService ggfcHbService;

	@Autowired
	private ICyztCyjgKfsService cyztCyjgKfsService;

	@Autowired
	private IXmglXmXmjbxxbService xmglXmXmjbxxbService;

	@Autowired
	private IDjGgHmxService djGgHmxService;

	@Autowired
	private IDjGgQlrmxService djGgQlrmxService;

	@Autowired
	private IGgfcLbService ggfcLbService;

	@Autowired
	private IFilemanagerDirectoryService filemanagerDirectoryService;

	@Autowired
	private IFilemanagerFileService filemanagerFileService;

	@Autowired
	private ITDataCheckService tDataCheckService;

	@Autowired
	private ITDataDistributionService tDataDistributionService;
	
	@RequiresPermissions("basp:ggfcHb:view")
	@GetMapping()
	public String ggfcHb()
	{
	    return prefix + "/ggfcHb";
	}
	
	/**
	 * 查询公共户列表
	 */
	@RequiresPermissions("basp:ggfcHb:list")
	@PostMapping("/list")
	@ResponseBody
	public TableDataInfo list(GgfcHb ggfcHb)
	{
		SysPerson user = ShiroUtils.getSysUser();
		List<GgfcHb> list=null;
		TDataDistribution tDataDistribution = new TDataDistribution();
		if (user.getRoles().get(0).getRoleId()==1){//判断是否有管理员权限
			//有管理员权限
			startPage();
			ggfcHb.setExt10(null);
			list= ggfcHbService.selectGgfcHbList(ggfcHb);
		}else if(user.getRoles().get(0).getRoleId()==120)
		{
			//有审核权限
			//查询所有已分配信息
			startPage();
			ggfcHb.setExt10("1");
			list= ggfcHbService.selectGgfcHbList(ggfcHb);
		}else{
			//无权限
			tDataDistribution.setRid(user.getUserId().toString());
			tDataDistribution = tDataDistributionService.selectTDataDistributionListUser(tDataDistribution);
			if(Common.notEmpty(tDataDistribution)){//查询分配信息
				ggfcHb.setDataid(tDataDistribution.getDataid());
			}else{
				ggfcHb.setDataid("''");
			}
			startPage();
			list= ggfcHbService.selectGgfcHbListUser(ggfcHb);
		}
		return getDataTable(list);
	}
	
	
	/**
	 * 导出公共户列表
	 */
	@RequiresPermissions("basp:ggfcHb:export")
    @PostMapping("/export")
    @ResponseBody
    public AjaxResult export(GgfcHb ggfcHb)
    {
    	List<GgfcHb> list = ggfcHbService.selectGgfcHbList(ggfcHb);
        ExcelUtil<GgfcHb> util = new ExcelUtil<GgfcHb>(GgfcHb.class);
        return util.exportExcel(list, "ggfcHb");
    }
	
	/**
	 * 新增公共户
	 */
	@GetMapping("/add")
	public String add()
	{
	    return prefix + "/add";
	}
	
	/**
	 * 新增保存公共户
	 */
	@RequiresPermissions("basp:ggfcHb:add")
	@Log(title = "公共户", businessType = BusinessType.INSERT)
	@PostMapping("/add")
	@ResponseBody
	public AjaxResult addSave(GgfcHb ggfcHb)
	{		
		return toAjax(ggfcHbService.insertGgfcHb(ggfcHb));
	}

	/**
	 * 修改公共户
	 */
	@GetMapping("/edit/{id}")
	public String edit(@PathVariable("id") String id, ModelMap mmap)
	{
		GgfcHb ggfcHb = ggfcHbService.selectGgfcHbById(id);					//公共户表
		List<CyztCyjgKfs> cyztCyjgKfs = cyztCyjgKfsService.selectCyztCyjgKfsByHbId(id);			//从业主体_开发商表
		List<XmglXmXmjbxxb> xmglXmXmjbxxb = xmglXmXmjbxxbService.selectXmglXmXmjbxxbByHbId(id);		//项目基本信息表
		List<GgfcLb> ggfcLb = ggfcLbService.selectGgfcLbByHbId(id);			//公共楼表
		List<DjGgHmx> djGgHmx = djGgHmxService.selectDjGgHmxByHbId(id);		//户明细表
		List<DjGgQlrmx> djGgQlrmx = djGgQlrmxService.selectDjGgQlrmxByHbId(id);		//户明细表
		List<FilemanagerDirectory> filemanagerDirectory = filemanagerDirectoryService.selectFilemanagerDirectoryByHbId(id);		//附件目录表

		mmap.put("ggfcHb", ggfcHb);
		mmap.put("cyztCyjgKfs", cyztCyjgKfs);
		mmap.put("xmglXmXmjbxxb", xmglXmXmjbxxb);
		mmap.put("ggfcLb", ggfcLb);
		mmap.put("djGgHmx", djGgHmx);
		mmap.put("djGgQlrmx", djGgQlrmx);
		mmap.put("filemanagerDirectory", filemanagerDirectory);
	    return prefix + "/edit";
	}
	
	/**
	 * 修改保存公共户
	 */
	@RequiresPermissions("basp:ggfcHb:edit")
	@Log(title = "公共户", businessType = BusinessType.UPDATE)
	@PostMapping("/edit")
	@ResponseBody
	public AjaxResult editSave(GgfcHb ggfcHb)
	{
		return toAjax(ggfcHbService.updateGgfcHb(ggfcHb));
	}

	/**
	 * 数据清理修改保存
	 */
	@RequiresPermissions("basp:ggfcHb:edit")
	@Log(title = "公共户", businessType = BusinessType.UPDATE)
	@PostMapping("/editDataClean")
	@ResponseBody
	public AjaxResult editDataCleanSave(GgfcHb ggfcHb) throws Exception {
		/*因为户表中的时间是根据系统时间自动修改，因此将此字段在比较时排除在外*/
		ggfcHb.setCjsj(ggfcHbService.selectGgfcHbById(ggfcHb.getId()).getCjsj());

		JSONObject jsonOld = JSONObject.fromObject(ggfcHbService.selectGgfcHbById(ggfcHb.getId()));
		JSONObject jsonNew = JSONObject.fromObject(ggfcHb);
        TDataCheck tDataCheck =new LogUtils().getAll(
                new JSONContrast().JSONContrast1(jsonOld,jsonNew).toString(),
                new JSONContrast().JSONContrast2(jsonOld,jsonNew).toString(),
                ggfcHb.getOwnusername(),
                ggfcHb.getTablename(),
                ggfcHb.getId());
        //拼接SQL并存入记录表
		String sql = tDataCheckService.updateSqlAndParamList(tDataCheck.getNewval(),tDataCheck.getCheckIdname(),tDataCheck.getCheckId(),tDataCheck.getCheckOsuser()+'.'+tDataCheck.getCheckTable());
		tDataCheck.setExt3(sql);
		tDataCheckService.insertTDataCheck(tDataCheck);
		//存入保存后状态值
		GgfcHb ggfcHb1=new GgfcHb();
		ggfcHb1.setId(ggfcHb.getId());
		ggfcHb1.setExt10("1");
		return toAjax(ggfcHbService.updateGgfcHb(ggfcHb1));
	}


	/**
	 * 删除公共户
	 */
	@RequiresPermissions("basp:ggfcHb:remove")
	@Log(title = "公共户", businessType = BusinessType.DELETE)
	@PostMapping( "/remove")
	@ResponseBody
	public AjaxResult remove(String ids)
	{		
		return toAjax(ggfcHbService.deleteGgfcHbByIds(ids));
	}

	/**
	 * 分配公共户
	 */
	@RequiresPermissions("basp:ggfcHb:distribute")
	@Log(title = "分配公共户", businessType = BusinessType.OTHER)
	@PostMapping( "/distribute")
	@ResponseBody
	public AjaxResult distribute(String ids)
	{
		return toAjax(ggfcHbService.deleteGgfcHbByIds(ids));
	}

	/**
	 * 查看附件图片路径
	 */
	@PostMapping("/filemanager")
	@ResponseBody
	public AjaxResult filemanager(String id) {
		return AjaxResult.success("0",filemanagerFileService.selectFilemanagerFileByHbId(id));
	}

	/**
	 * 审核公共户权利人
	 */
	@RequiresPermissions("basp:ggfcHb:examine")
	@Log(title = "审核公共户权利人", businessType = BusinessType.OTHER)
	@PostMapping( "/examine")
	@ResponseBody
	public AjaxResult examine(GgfcHb ggfcHb)
	{
		TDataCheck tDataCheck = new TDataCheck();
		//获取当前登录用户
		SysPerson currentUser = ShiroUtils.getSysUser();
		if (Common.notEmpty(ggfcHb.getCheckId())) {
			//审核对应权利人数据
			tDataCheck.setCheckId(ggfcHb.getCheckId());
			tDataCheck.setCheckStat(ggfcHb.getCheckStat());
			tDataCheck.setExt1(currentUser.getLoginName());
			tDataCheck.setExt2(Common.getTime());
			tDataCheckService.updateById(tDataCheck);
		}
		//审核对应公共户数据
		tDataCheck.setCheckId(ggfcHb.getId());
		tDataCheck.setCheckStat(ggfcHb.getCheckStat());
		tDataCheck.setExt1(currentUser.getLoginName());
		tDataCheck.setExt2(Common.getTime());
		tDataCheckService.updateById(tDataCheck);
		//审核所有记录id相关记录
		return toAjax(ggfcHbService.examineGgfcHb(ggfcHb));
	}
}
